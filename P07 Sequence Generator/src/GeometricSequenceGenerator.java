//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title: P07 Sequence Generator
// Files: Sequence.java, GeometricSequenceGenerator.java,
//        SequenceGeneratorTests.java,
//        FibonacciSequenceGenerator.java
//        DigitProductSequenceGenerator.java,
//        ArithmeticSequenceGenerator.java
//
// Course: CS300, Fall 2018
//
// Author: Stephen Fan
// Email: sfan54@wisc.edu
// Lecturer's Name: Alexi Brooks
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully
// acknowledge and credit those sources of help here. Instructors and TAs do
// not need to be credited here, but tutors, friends, relatives, room mates,
// strangers, and others do. If you received no outside help from either type
// of source, then please explicitly indicate NONE.
//
// Persons: NONE
// Online Sources: NONE
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////

import java.util.Iterator;

/**
 * This class represents a generator for a geometric progression.
 * This class implements the Iterator<Integer> interface.
 * 
 * @author Stephen Fan
 *
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence

  // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() 
  // method
  private int generatedCount; 

  /**
   * Constructor for the GeometricSequenceGenerator class.
   * It throws IllegalArgumentExceptions if the initial term is <= 0 or if
   * the ratio is <= 0 or if the size is <= 0.
   * 
   * @param init is the initial term of the geometric sequence
   * @param ratio is the common ratio between each term in the geometric
   * sequence
   * @param size is the number of terms in the geometric sequence
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // Throws an IllegalArgumentException if the initial term or the common
    // ratio is <= 0 with the appropriate warning message
    if (init <= 0 || ratio <= 0) {
      throw new IllegalArgumentException("WARNING: The starting element and "
        + "the common ratio for a geometric progression should be STRICTLY " 
        + "POSITIVE.");
    }
    
    // Throws an IllegalArgumentException if the size of the sequence is <=0
    // with the appropriate warning message
    if (size <= 0) {
      throw new IllegalArgumentException("WARNING: CANNOT create a sequence " 
        + "with size <= zero.");
    }

    // initialize variables
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    
    // initializes next to the first element in this arithmetic progression
    next = init; 
    generatedCount = 0;
  }

  /**
   * Checks if the iteration has a next element in this sequence
   * 
   * @return true if the current element in the iteration has a next element 
   * in this sequence, false otherwise
   */
  @Override
  public boolean hasNext() {
    // time complexity: O(1)
    return generatedCount < SIZE;
  }

  /**
   * Returns the next element in this arithmetic sequence iteration with 
   * respect to the numbers generated so far
   * 
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    // time complexity: O(1)
    // check if the current element has a next element in this sequence
    if (!hasNext()) 
      return null;
    int current = next; // set the current element to next
    generatedCount++; // increment the number of generated elements so far
    
    // set the next element (multiplies the ratio by the current number)
    next *= this.RATIO; 
    return current; // return the current number as the generated one
  }
}
